Program ProjBookWorm;

{$APPTYPE CONSOLE}

uses
  System.SysUtils,
  Web.ReqMulti,
  Web.WebReq,
  Web.WebBroker,
  IdContext,
  IdHTTPWebBrokerBridge,
  MVCFramework,
  MVCFramework.Logger,
  MVCFramework.DotEnv,
  MVCFramework.Commons,
  MVCFramework.Serializer.Commons,
  MVCFramework.Container,
  MVCFramework.Signal,
  Model.User in '..\src\model\Model.User.pas',
  Controller.User in '..\src\controller\Controller.User.pas',
  WebModule.Main in '..\src\services\WebModule.Main.pas' {BookWorm: TWebModule},
  UDMMain in '..\src\dataModule\UDMMain.pas' {DMMain: TDataModule},
  Model.User.Security in '..\src\model\Model.User.Security.pas',
  Service.User in '..\src\services\Service.User.pas',
  Service.UserSecurity in '..\src\services\Service.UserSecurity.pas',
  Controller.UserSecurity in '..\src\controller\Controller.UserSecurity.pas',
  Model.Book in '..\src\model\Model.Book.pas',
  Model.Book.Genre in '..\src\model\Model.Book.Genre.pas',
  Model.Book.Language in '..\src\model\Model.Book.Language.pas',
  Model.Book.Author in '..\src\model\Model.Book.Author.pas',
  Model.Book.Hashtag in '..\src\model\Model.Book.Hashtag.pas',
  Model.Book.Rate in '..\src\model\Model.Book.Rate.pas',
  Model.Book.Comment in '..\src\model\Model.Book.Comment.pas',
  Service.Book in '..\src\services\Service.Book.pas',
  Service.Book.Genre in '..\src\services\Service.Book.Genre.pas',
  Service.Book.Language in '..\src\services\Service.Book.Language.pas',
  Service.Book.Author in '..\src\services\Service.Book.Author.pas',
  Service.Book.Hashtag in '..\src\services\Service.Book.Hashtag.pas',
  Service.Book.Rate in '..\src\services\Service.Book.Rate.pas',
  Service.Book.Comment in '..\src\services\Service.Book.Comment.pas',
  Controller.Book in '..\src\controller\Controller.Book.pas',
  Controller.Book.Author in '..\src\controller\Controller.Book.Author.pas',
  Controller.Book.Comment in '..\src\controller\Controller.Book.Comment.pas',
  Controller.Book.Rate in '..\src\controller\Controller.Book.Rate.pas',
  Controller.Book.Hashtag in '..\src\controller\Controller.Book.Hashtag.pas',
  Controller.Book.Language in '..\src\controller\Controller.Book.Language.pas',
  Model.Book.Image in '..\src\model\Model.Book.Image.pas',
  Controller.Book.Image in '..\src\controller\Controller.Book.Image.pas',
  Service.Book.Image in '..\src\services\Service.Book.Image.pas',
  Model.User.Image in '..\src\model\Model.User.Image.pas',
  Service.User.Image in '..\src\services\Service.User.Image.pas',
  Controller.Book.Genre in '..\src\controller\Controller.Book.Genre.pas',
  Model.User.GenreFavorit in '..\src\model\Model.User.GenreFavorit.pas',
  Service.User.GenreFavorit in '..\src\services\Service.User.GenreFavorit.pas',
  Controller.User.GenreFavorite in '..\src\controller\Controller.User.GenreFavorite.pas',
  Controller.User.Image in '..\src\controller\Controller.User.Image.pas',
  Model.Book.BookLike in '..\src\model\Model.Book.BookLike.pas',
  Service.Book.Like in '..\src\services\Service.Book.Like.pas',
  Controller.Book.Like in '..\src\controller\Controller.Book.Like.pas',
  Model.Book.CollectionType in '..\src\model\Model.Book.CollectionType.pas',
  Model.Book.Collection in '..\src\model\Model.Book.Collection.pas',
  Model.Book.CollectionDetail in '..\src\model\Model.Book.CollectionDetail.pas',
  Model.Book.AccessibilityGroup in '..\src\model\Model.Book.AccessibilityGroup.pas',
  Model.Book.AccessibilityDetail in '..\src\model\Model.Book.AccessibilityDetail.pas',
  Model.Book.AccessibilityType in '..\src\model\Model.Book.AccessibilityType.pas';

{$R *.res}

Procedure RunServer(APort: Integer);
Var
    LServer: TIdHTTPWebBrokerBridge;
Begin
    LServer := TIdHTTPWebBrokerBridge.Create(nil);
    Try
        LServer.OnParseAuthentication := TMVCParseAuthentication.OnParseAuthentication;
        LServer.DefaultPort := APort;
        LServer.KeepAlive := dotEnv.Env('dmvc.indy.keep_alive', True);
        LServer.MaxConnections := dotEnv.Env('dmvc.webbroker.max_connections', 0);
        LServer.ListenQueue := dotEnv.Env('dmvc.indy.listen_queue', 500);
        LServer.Active := True;
        LogI('Listening on http://localhost:' + APort.ToString);
        LogI('Application started. Press Ctrl+C to shut down.');
        WaitForTerminationSignal;
        EnterInShutdownState;
        LServer.Active := False;
    Finally
        LServer.Free;
    End;
End;

begin
  { Enable ReportMemoryLeaksOnShutdown during debug }
  // ReportMemoryLeaksOnShutdown := True;
  IsMultiThread := True;

  // DMVCFramework Specific Configurations
  //   When MVCSerializeNulls = True empty nullables and nil are serialized as json null.
  //   When MVCSerializeNulls = False empty nullables and nil are not serialized at all.
  MVCSerializeNulls := True;

  // MVCNameCaseDefault defines the name case of property names generated by the serializers.
  //   Possibile values are: ncAsIs, ncUpperCase, ncLowerCase (default), ncCamelCase, ncPascalCase, ncSnakeCase
  MVCNameCaseDefault := TMVCNameCase.ncCamelCase;

  // UseConsoleLogger defines if logs must be emitted to also the console (if available).
  UseConsoleLogger := True;

  // UseLoggerVerbosityLevel defines the lowest level of logs that will be produced.
  UseLoggerVerbosityLevel := TLogLevel.levNormal;


  LogI('** DMVCFramework Server ** build ' + DMVCFRAMEWORK_VERSION);

  try
    if WebRequestHandler <> nil then
      WebRequestHandler.WebModuleClass := WebModuleClass;

    WebRequestHandlerProc.MaxConnections := dotEnv.Env('dmvc.handler.max_connections', 1024);

{$IF CompilerVersion >= 34} //SYDNEY+
    if dotEnv.Env('dmvc.profiler.enabled', false) then
    begin
      Profiler.ProfileLogger := Log;
      Profiler.WarningThreshold := dotEnv.Env('dmvc.profiler.warning_threshold', 2000);
    end;
{$ENDIF}

    //RegisterServices(DefaultMVCServiceContainer);
    DefaultMVCServiceContainer.Build;

    RunServer(dotEnv.Env('dmvc.server.port', 9547));
  except
    on E: Exception do
      LogF(E.ClassName + ': ' + E.Message);
  end;
end.
