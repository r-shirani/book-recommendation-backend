Unit Controller.Book.Collection;

Interface

Uses
    System.Classes,
    MVCFramework,
    MVCFramework.Commons,
    MVCFramework.Serializer.Commons,
    System.SysUtils,
    System.Generics.Collections,
    Service.Book.Collection,
    Service.Book.CollectionDetail,  // تصحيح: اينجا صحيحش رو وارد کن
    Model.Book.Collection,
    Model.Book.CollectionDetail,
    WebModule.Main,
    Service.Book.AccessibilityGroup;

Type
    TInt64Array = TArray<Int64>;

Type
    [MVCPath(BASE_API_V1 + '/collections')]
    TCollectionController = class(TMVCController)
    private
        FCollectionService: ICollectionService;

    public
        constructor Create; override;
        destructor Destroy; override;

        [MVCPath('')]
        [MVCHTTPMethod([httpGET])]
        procedure GetCollectionByID(Const [MVCFromQueryString('userid', '0')] aUserID: Int64;
          Const [MVCFromQueryString('pagenum', 0)] aPageNum: Integer;
          Const [MVCFromQueryString('count', 0)] aCount: Integer);

        [MVCPath('')]
        [MVCHTTPMethod([httpPOST])]
        Procedure AddCollection();

        [MVCPath('/image')]
        [MVCHTTPMethod([httpPOST])]
        procedure AddImage([MVCFromQueryString('collectionid', '0')] collectionid: Int64);

        [MVCPath('/image')]
        [MVCHTTPMethod([httpGET])]
        procedure GetImage([MVCFromQueryString('collectionid', '0')] collectionid: Int64);

        [MVCPath('/detail')]
        [MVCHTTPMethod([httpPOST])]
        procedure AddDetail([MVCFromBody] Const ACollectionDetailDTO: TCollectionDetailDTO);

        [MVCPath('/detail')]
        [MVCHTTPMethod([httpGet])]
        procedure GetDetail([MVCFromQueryString('collectionid', '0')] collectionid: Int64);

        [MVCPath('/detail')]
        [MVCHTTPMethod([httpDELETE])]
        procedure DeleteDetail([MVCFromQueryString('collectionid', '0')] CollectionID: Int64;
          Const [MVCFromQueryString('bookid')] BookID: Int64);

        [MVCPath('')]
        [MVCHTTPMethod([httpPUT])]
        procedure UpdateCollection([MVCFromBody] const ACollection: TCollection);
        [MVCPath('')]
        [MVCHTTPMethod([httpDELETE])]
        procedure DeleteCollection([MVCFromQueryString('collectionid', '0')] collectionid: Int64);

        [MVCPath('/access')]
        [MVCHTTPMethod([httpGET])]
        Procedure GetAccessibility([MVCFromQueryString('collectionid', '0')] aCollectionID: Int64);

        [MVCPath('/access')]
        [MVCHTTPMethod([httpPUT])]
        Procedure UpdateAccessibility([MVCFromQueryString('collectionid', '0')] aCollectionID: Int64);

        [MVCPath('/access')]
        [MVCHTTPMethod([httpDELETE])]
        Procedure DeleteAccessibility([MVCFromQueryString('collectionid', '0')] aCollectionID: Int64);

End;

Implementation

uses
  FireDAC.Comp.Client, JsonDataObjects, System.JSON;

{ TCollectionController }

//______________________________________________________________________________
Constructor TCollectionController.Create;
Begin
    Inherited;
    FCollectionService := TCollectionService.Create;
End;
//______________________________________________________________________________
Destructor TCollectionController.Destroy;
Begin
    FCollectionService := nil;
    Inherited;
End;
//______________________________________________________________________________
procedure TCollectionController.AddDetail(Const ACollectionDetailDTO: TCollectionDetailDTO);
Begin
    FCollectionService.AddDetail(ACollectionDetailDTO.CollectionID, ACollectionDetailDTO.BookID);
    Render(HTTP_STATUS.Created, 'Details added successfully');
End;
//______________________________________________________________________________
Procedure TCollectionController.AddImage(collectionid: Int64);
Var
    LFileStream: TStream;
    LFileName: String;
Begin
    LFileStream := Context.Request.Files[0].Stream;
    LFileName := Context.Request.Files[0].FileName;

    Try
        FCollectionService.AddImage(LFileStream, LFileName, collectionid);
        Render(HTTP_STATUS.Created, 'Image Updated');
    Except
        On E: Exception Do
        Begin
            Render(HTTP_STATUS.BadRequest, E.Message);
        End;
    End;
End;
//______________________________________________________________________________
Procedure TCollectionController.GetCollectionByID(Const aUserID: Int64;
  Const aPageNum: Integer; Const aCount: Integer);
Var
    FDSP: TFDStoredProc;
Begin
    FDSP := FCollectionService.GetCollection(aUserID, aPageNum, aCount);
    If Assigned(FDSP) then
        Render(HTTP_STATUS.OK, FDSP)
    Else
        Render(HTTP_STATUS.NotFound, 'Collection not found');
End;
//______________________________________________________________________________
Procedure TCollectionController.GetDetail(collectionid: Int64);
Var
    FDSP: TFDStoredProc;
Begin
    FDSP := FCollectionService.GetDetail(collectionid);
    If Assigned(FDSP) then
        Render(HTTP_STATUS.OK, FDSP)
    Else
        Render(HTTP_STATUS.NotFound, 'Collection not found');
End;
//______________________________________________________________________________
Procedure TCollectionController.GetImage(collectionid: Int64);
Var
    LImageStream: TStream;
    LContentType: String;
Begin
    If (CollectionID.ToString = '0') then
    Begin
        Render(HTTP_STATUS.NotFound, 'CollectionID not found');
        Exit;
    End
    Else
    Begin
        LImageStream := FCollectionService.GetImageFile(collectionid, LContentType);
        Try
            Context.Response.ContentType := LContentType;
            Render(LImageStream, False);
        Finally
            LImageStream.Free;
        End;
    End;
End;
//______________________________________________________________________________
Procedure TCollectionController.AddCollection();
Var
    sTemp: String;
    bTemp: Boolean;
    iTemp: Integer;
    i64Temp: Int64;
    LFileStream: TStream;
    LFileName: String;
    LCollection: TCollection;
    LCollectionID: Int64;
    LDetail: TInt64Array;
    LFullCollection: System.JSON.TJSONObject;
    LJSONValue: TJSONValue;
Begin
    // دریافت و بررسی JSON
    LJSONValue := System.JSON.TJSONObject.ParseJSONValue(Context.Request.Params['data']);
    If not Assigned(LJSONValue) or not (LJSONValue is TJSONObject) then
    begin
        Render(HTTP_STATUS.BadRequest, 'Invalid JSON data');
        Exit;
    end;

    sTemp := LJSONValue.ToString;
    LFullCollection := TJSONObject(LJSONValue);

    LCollection := TCollection.Create;
    Try
        // خواندن فیلدها با بررسی وجود
        If LFullCollection.TryGetValue<Boolean>('ispublic', bTemp) then
            LCollection.IsPublic := bTemp
        Else
            LCollection.IsPublic := False; // مقدار پیش‌فرض

        If (LFullCollection.TryGetValue<String>('title', sTemp)) then
        Begin
            LCollection.Title := sTemp;

        End
        Else
        Begin
            Render(HTTP_STATUS.BadRequest, 'Missing required field: title');
            Exit;
        End;

        If LFullCollection.TryGetValue<String>('discription', sTemp) then
            LCollection.Discription := sTemp
        Else
            LCollection.Discription := '';

        If LFullCollection.TryGetValue<Integer>('genreid1', iTemp) then
            LCollection.GenreID1 := iTemp
        Else
            LCollection.GenreID1 := 0;

        If LFullCollection.TryGetValue<Integer>('genreid2', iTemp) then
            LCollection.GenreID2 := iTemp
        Else
            LCollection.GenreID2 := 0;

        If LFullCollection.TryGetValue<Integer>('genreid3', iTemp) then
            LCollection.GenreID3 := iTemp
        Else
            LCollection.GenreID3 := 0;

        If (not LFullCollection.TryGetValue<Int64>('userid', i64Temp)) then
        Begin
            Render(HTTP_STATUS.BadRequest, 'Missing required field: userid');
            Exit;
        End
        Else
        Begin
            LCollection.UserID := i64Temp;
        End;

        Try
            LCollectionID := FCollectionService.Add(LCollection);

            Try
                If LFullCollection.TryGetValue<TInt64Array>('detail', LDetail) then
                Begin
                    FCollectionService.AddDetail(LCollectionID, LDetail);
                End;
            Except
                On E: EMVCException do
                Begin
                    FCollectionService.Delete(LCollectionID);
                    Render(HTTP_STATUS.BadRequest, E.Message);
                    Exit;
                End;
            End;
        Except
            On E: EMVCException do
            Begin
                Render(HTTP_STATUS.BadRequest, E.Message);
                Exit;
            End;
        End;
    Finally
        LCollection.Free;
    End;


    If (Context.Request.Files.Count <> 0) then
    begin
        Try
            LFileStream := Context.Request.Files[0].Stream;
            LFileName := Context.Request.Files[0].FileName;
            FCollectionService.AddImage(LFileStream, LFileName, LCollectionID);
            Render(HTTP_STATUS.Created, 'Image Updated');
        Except
            On E: Exception Do
            Begin
                FCollectionService.Delete(LCollectionID);
                Render(HTTP_STATUS.BadRequest, E.Message);
                Exit;
            End;
        End;
    End;

    LFullCollection.AddPair('collectionid', LCollectionID);
    Render(HTTP_STATUS.Created, LFullCollection);
End;
//______________________________________________________________________________
Procedure TCollectionController.UpdateCollection(const ACollection: TCollection);
Begin
    FCollectionService.Update(ACollection);
    Render(HTTP_STATUS.OK, 'Collection updated successfully');
End;
//______________________________________________________________________________
Procedure TCollectionController.DeleteCollection(collectionid: Int64);
Begin
    FCollectionService.Delete(collectionid);
    Render(HTTP_STATUS.OK, 'Collection deleted successfully');
End;
//______________________________________________________________________________
Procedure TCollectionController.DeleteDetail(CollectionID: Int64;
  const BookID: Int64);
Begin
    FCollectionService.DeleteBook(CollectionID, BookID);
    Render(HTTP_STATUS.OK, 'Collection updated successfully');
End;
//______________________________________________________________________________
procedure TCollectionController.DeleteAccessibility(aCollectionID: Int64);
Var
    lAccessibilityService: IAccessibilityGroupService;
    lJSONBody: System.JSON.TJSONObject;
    lUserIDList: TInt64Array;
Begin
    lAccessibilityService := TAccessibilityGroupService.Create;
    Try
        lJSONBody := System.JSON.TJSONObject.ParseJSONValue(Context.Request.Body) AS System.JSON.TJSONObject;
        If lJSONBody.TryGetValue<TInt64Array>('userid', lUserIDList) then
        Begin
            lAccessibilityService.Delete((aCollectionID, lUserIDList);
            Render(HTTP_STATUS.OK, 'Updated');
        End
        Else
        Begin
            Render(HTTP_STATUS.NoContent, 'userid list needed! like thie=  {"userid": [13,54,85]}');
        End;


    Finally
        lAccessibilityService := Nil;
    End;
End;
//______________________________________________________________________________
procedure TCollectionController.UpdateAccessibility(aCollectionID: Int64);
Var
    lAccessibilityService: IAccessibilityGroupService;
    lJSONBody: System.JSON.TJSONObject;
    lUserIDList: TInt64Array;
Begin
    lAccessibilityService := TAccessibilityGroupService.Create;
    Try
        lJSONBody := System.JSON.TJSONObject.ParseJSONValue(Context.Request.Body) AS System.JSON.TJSONObject;
        If lJSONBody.TryGetValue<TInt64Array>('userid', lUserIDList) then
        Begin
            lAccessibilityService.Update(aCollectionID, lUserIDList);
            Render(HTTP_STATUS.OK, 'Updated');
        End
        Else
        Begin
            Render(HTTP_STATUS.NoContent, 'userid list needed! like thie=  {"userid": [13,54,85]}');
        End;


    Finally
        lAccessibilityService := Nil;
    End;
End;
//______________________________________________________________________________
Procedure TCollectionController.GetAccessibility(aCollectionID: Int64);
Var
    lAccessibilityService: IAccessibilityGroupService;
Begin
    lAccessibilityService := TAccessibilityGroupService.Create;
    try
        Render(lAccessibilityService.GetAll(aCollectionID));
    finally
        lAccessibilityService := Nil;
    end;
End;
//______________________________________________________________________________

End.

