Unit Controller.Book.Collection;

Interface

Uses
    System.Classes,
    MVCFramework,
    MVCFramework.Commons,
    MVCFramework.Serializer.Commons,
    System.SysUtils,
    System.Generics.Collections,
    Service.Book.Collection,
    Service.Book.CollectionDetail,  // تصحيح: اينجا صحيحش رو وارد کن
    Model.Book.Collection,
    Model.Book.CollectionDetail,
    WebModule.Main;

Type
    [MVCPath(BASE_API_V1 + '/collections')]
    TCollectionController = class(TMVCController)
    private
        FCollectionService: ICollectionService;

    public
        constructor Create; override;
        destructor Destroy; override;

        [MVCPath('')]
        [MVCHTTPMethod([httpGET])]
        procedure GetCollectionByID([MVCFromQueryString('userid', '0')] userid: Int64);

        [MVCPath('')]
        [MVCHTTPMethod([httpPOST])]
        procedure AddCollection([MVCFromBody] const ACollection: TCollection);

        [MVCPath('/image')]
        [MVCHTTPMethod([httpPOST])]
        procedure AddImage([MVCFromQueryString('collectionid', '0')] collectionid: Int64);

        [MVCPath('/image')]
        [MVCHTTPMethod([httpGET])]
        procedure GetImage([MVCFromQueryString('collectionid', '0')] collectionid: Int64);

        [MVCPath('/detail')]
        [MVCHTTPMethod([httpPOST])]
        procedure AddDetail([MVCFromBody] Const ACollectionDetailDTO: TCollectionDetailDTO);

        [MVCPath('/detail')]
        [MVCHTTPMethod([httpGet])]
        procedure GetDetail([MVCFromQueryString('collectionid', '0')] collectionid: Int64);

        [MVCPath('')]
        [MVCHTTPMethod([httpPUT])]
        procedure UpdateCollection([MVCFromBody] const ACollection: TCollection);

        [MVCPath('')]
        [MVCHTTPMethod([httpDELETE])]
        procedure DeleteCollection([MVCFromQueryString('collectionid', '0')] collectionid: Int64);
End;

Implementation

uses
  FireDAC.Comp.Client, JsonDataObjects;

{ TCollectionController }

//______________________________________________________________________________
Constructor TCollectionController.Create;
Begin
    Inherited;
    FCollectionService := TCollectionService.Create;
End;
//______________________________________________________________________________
Destructor TCollectionController.Destroy;
Begin
    FCollectionService := nil;
    Inherited;
End;
//______________________________________________________________________________
procedure TCollectionController.AddDetail(Const ACollectionDetailDTO: TCollectionDetailDTO);
Begin
    FCollectionService.AddDetail(ACollectionDetailDTO.CollectionID, ACollectionDetailDTO.BookID);
    Render(HTTP_STATUS.Created, 'Details added successfully');
End;
//______________________________________________________________________________
Procedure TCollectionController.AddImage(collectionid: Int64);
Var
    LFileStream: TStream;
    LFileName: String;
    LCollectionID: Int64;
Begin
    LFileStream := Context.Request.Files[0].Stream;
    LFileName := Context.Request.Files[0].FileName;
    LCollectionID := collectionid;

    Try
        FCollectionService.AddImage(LFileStream, LFileName, collectionid);
        Render(HTTP_STATUS.Created, 'Image Updated');
    Except
        On E: Exception Do
        Begin
            Render(HTTP_STATUS.BadRequest, E.Message);
        End;
    End;
End;
//______________________________________________________________________________
procedure TCollectionController.GetCollectionByID(userid: Int64);
Var
    FDSP: TFDStoredProc;
Begin
    FDSP := FCollectionService.GetCollection(userid);
    If Assigned(FDSP) then
        Render(HTTP_STATUS.OK, FDSP)
    Else
        Render(HTTP_STATUS.NotFound, 'Collection not found');
End;
//______________________________________________________________________________
Procedure TCollectionController.GetDetail(collectionid: Int64);
Var
    FDSP: TFDStoredProc;
Begin
    FDSP := FCollectionService.GetDetail(collectionid);
    If Assigned(FDSP) then
        Render(HTTP_STATUS.OK, FDSP)
    Else
        Render(HTTP_STATUS.NotFound, 'Collection not found');
End;
//______________________________________________________________________________
Procedure TCollectionController.GetImage(collectionid: Int64);
Var
    LCollection: TCollection;
    LImageStream: TStream;
Begin
    If (CollectionID.ToString <> '0') then
    Begin
        Render(HTTP_STATUS.NotFound, 'CollectionID not found');
        Exit;
    End
    Else
    Begin
        LImageStream := FCollectionService.GetImageFile(collectionid);
        Try
            Render(LImageStream, False);
        Finally
            LImageStream.Free;
        End;
    End;
End;
//______________________________________________________________________________
Procedure TCollectionController.AddCollection(const ACollection: TCollection);
Begin
    FCollectionService.Add(ACollection);
    Render(HTTP_STATUS.Created, 'Collection added successfully');
end;
//______________________________________________________________________________
Procedure TCollectionController.UpdateCollection(const ACollection: TCollection);
Begin
    FCollectionService.Update(ACollection);
    Render(HTTP_STATUS.OK, 'Collection updated successfully');
End;
//______________________________________________________________________________
Procedure TCollectionController.DeleteCollection(collectionid: Int64);
Begin
    FCollectionService.Delete(collectionid);
    Render(HTTP_STATUS.OK, 'Collection deleted successfully');
End;
//______________________________________________________________________________

End.

