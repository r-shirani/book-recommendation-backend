Unit Controller.Book;

Interface

Uses
    System.JSON,
    System.Variants,
    System.Generics.Collections,
    MVCFramework,
    MVCFramework.Commons,
    MVCFramework.ActiveRecord,
    Model.Book,
    Service.Book,
    WebModule.Main;

Type
    [MVCPath(BASE_API_V1 + '/book')]
    TBookController = class(TMVCController)
    Private
        FBookService: IBookService;

    Public
        Constructor Create; override;
        Destructor Destroy; override;

        [MVCPath('/getAllBooks')]
        [MVCHTTPMethod([httpGET])]
        Procedure GetAllBooks;

        [MVCPath('/($id)')]
        [MVCHTTPMethod([httpGET])]
        Procedure GetBookByID(Const id: Int64);

        [MVCPath('')]
        [MVCHTTPMethod([httpPOST])]
        Procedure AddBook;

        [MVCPath('')]
        [MVCHTTPMethod([httpPUT])]
        Procedure UpdateBook;

        [MVCPath('/($id)')]
        [MVCHTTPMethod([httpDELETE])]
        Procedure DeleteBook(Const id: Int64);

        [MVCPath('/($id)/image')]
        [MVCHTTPMethod([httpGet])]
        Procedure GetImage(Const id: Int64);

        [MVCPath('/($id)/image')]
        [MVCHTTPMethod([httpPost])]
        Procedure AddImage(Const id: Int64);

        [MVCPath('/($id)/image')]
        [MVCHTTPMethod([httpDelete])]
        Procedure DeleteImage(Const id: Int64);
    End;

Implementation

{ TBookController }

//______________________________________________________________________________
Constructor TBookController.Create;
Begin
    Inherited;
    FBookService := TBookService.Create;
End;
//______________________________________________________________________________
Destructor TBookController.Destroy;
Begin
    FBookService := nil;
    Inherited;
End;
//______________________________________________________________________________
Procedure TBookController.GetAllBooks;
Var
    Books: TObjectList<TBook>;
Begin
    Books := FBookService.GetAllBooks;
    Try
        If Books.Count > 0 Then
            Render(Books)
        Else
            Render(HTTP_STATUS.NoContent);
    Finally
        Books.Free;
    End;
End;
//______________________________________________________________________________
Procedure TBookController.GetBookByID(Const id: Int64);
Var
    Book: TBook;
Begin
    Book := FBookService.GetBookByID(id);
    If Assigned(Book) Then
        Render(Book)
    Else
        Render(HTTP_STATUS.NotFound);
    Book.Free;
End;
//______________________________________________________________________________
Procedure TBookController.AddBook;
Var
    Book: TBook;
Begin
    Book := Context.Request.BodyAs<TBook>;
    Try
        FBookService.AddBook(Book);
        Render(HTTP_STATUS.Created, 'Book added successfully');
    Finally
        Book.Free;
    End;
End;
//______________________________________________________________________________
Procedure TBookController.UpdateBook;
Var
    Book: TBook;
Begin
    Book := Context.Request.BodyAs<TBook>;
    Try
        FBookService.UpdateBook(Book);
        Render(HTTP_STATUS.OK, 'Book updated successfully');
    Finally
        Book.Free;
    End;
End;
//______________________________________________________________________________
Procedure TBookController.DeleteBook(Const id: Int64);
Begin
    FBookService.DeleteBook(id);
    Render(HTTP_STATUS.OK, 'Book deleted successfully');
End;
//______________________________________________________________________________
procedure TBookController.AddImage(const id: Int64);
begin

End;
//______________________________________________________________________________
procedure TBookController.GetImage(const id: Int64);
begin

End;
//______________________________________________________________________________
procedure TBookController.DeleteImage(const id: Int64);
begin

End;
//______________________________________________________________________________

End.
